@use '../module' as util;

/* Classes for creating pokemon type boxs and their effects */

ol.pta-pokemon-team {
    list-style: none;
    padding: 0;
    margin: 0;

    .pta-pokemon {
        --angle: 110deg;
        --scale: 60%;

        background-color: var(--color-cool-4);
        margin-bottom: 5px;
        position: relative;
        width: 225px;
        height: 75px;
        box-sizing: border-box;
        padding: var(--pta-scale-px);
        display: flex;
        flex-direction: row;

        --corner: 1em;
        clip-path: polygon(
                /* top edge */
                var(--corner) 0%,
                calc(100% - var(--corner)) 0%,
                /* right edge */
                100% var(--corner),
                100% calc(100% - var(--corner)),
                /* bottom edge */
                calc(100% - var(--corner)) 100%,
                var(--corner) 100%,
                /* left edge */
                0% calc(100% - var(--corner)),
                0% var(--corner));

        .portrait {
            flex: 0 0;
            background-repeat: no-repeat;
            background-size: contain;
            height: 100%;
            aspect-ratio: 1;

            img {
                border: 0;
            }
        }

        .details {
            align-items: center;
            display: flex;
            flex-direction: column;
            flex: 1;
            justify-content: center;
            text-align: center;

            >* {
                flex: 1;
                width: 100%;
            }

            .nickname {
                text-align: left;
                font-weight: bold;
                font-size: calc(var(--pta-scale-em) * 0.8);
            }

            .health {
                flex: 0;
            }
        }
    }
}

.type-tag {
    padding: var(--pta-scale-px);
    //font-size: var(--pta-scale-em);
    border-radius: var(--pta-scale-px);
    border: 2px solid;
    width: fit-content;
    text-align: center;

    @each $type in util.$pokemon-types {
        &.#{$type} {
            border-color: var(--pta-c-type-#{$type});
        }
    }
}

.pta-pc-layout-grid {
    display: flex;
    flex: 0 1;
    gap: var(--pta-scale-px);
    flex-wrap: wrap;

    .pta-grid-item {
        height: calc(var(--pta-scale-px) * 10);
        flex: 0 0 calc(var(--pta-scale-px) * 10);
        border: 1px solid rgb(174, 174, 174);
        border-radius: 5px;
        transition: flex 0.2s ease-in-out;
        display: flex;
        flex-direction: row;

        align-items: flex-start;
        overflow: hidden;
        flex-wrap: nowrap;
        white-space: nowrap;

        transition: all 0.2s;

        background-color: rgba(255, 255, 255, 0);

        &:hover {
            border-color: white;
            border-radius: 10px;
            background-color: rgba(255, 255, 255, 0.15);
        }

        .wrapper {
            min-width: calc(var(--pta-scale-px) * 10);
            min-height: calc(var(--pta-scale-px) * 10);
            background-size: contain;
            background-repeat: no-repeat;
        }

        >.controls {
            display: flex;
            flex-direction: column;
            height: 100%;

            .item-control {
                flex: 1;
            }
        }

        label {
            opacity: 0;
            transition: opacity 0.3s;
            text-align: center;
            background-color: grey;
        }

        &.selected {
            flex: 0 0 calc(var(--pta-scale-px) * 13);
        }

        :hover {
            cursor: pointer;

            label {
                opacity: 1;
            }
        }
    }
}

.pta-grid-item {
    border: 1px solid rgb(174, 174, 174);
    border-radius: 5px;
    transition: flex 0.2s ease-in-out;
    
    transition: all 0.2s;
    background-color: rgba(255, 255, 255, 0);

    &:hover {
        border-color: white;
        border-radius: 10px;
        background-color: rgba(255, 255, 255, 0.15);
    }
}